// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Blaise.Api.Tests.Behaviour.Features
{


    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::NUnit.Framework.TestFixtureAttribute()]
    [global::NUnit.Framework.DescriptionAttribute("Import online cases")]
    [global::NUnit.Framework.FixtureLifeCycleAttribute(global::NUnit.Framework.LifeCycle.InstancePerTestCase)]
    [global::NUnit.Framework.CategoryAttribute("onlinedata")]
    public partial class ImportOnlineCasesFeature
    {

        private global::Reqnroll.ITestRunner testRunner;

        private static string[] featureTags = new string[] {
                "onlinedata"};

        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Import online cases", "\tIn order to process cases gathered online\r\n\tAs a service\r\n\tI want to be given ca" +
                "ses to import representing the data captured online", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());

#line 1 "ImportOnlineCases.feature"
#line hidden

        [global::NUnit.Framework.OneTimeSetUpAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }

        [global::NUnit.Framework.OneTimeTearDownAttribute()]
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }

        [global::NUnit.Framework.SetUpAttribute()]
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null)
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null)
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }

        [global::NUnit.Framework.TearDownAttribute()]
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }

        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::NUnit.Framework.TestContext>(global::NUnit.Framework.TestContext.CurrentContext);
        }

        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }

        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }

        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/ImportOnlineCases.feature", 29);
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("There is an online file available that contains cases that already exists in the " +
            "blaise database, the cases are updated depending on the outcome codes")]
        [global::NUnit.Framework.CategoryAttribute("smoke")]
        public async global::System.Threading.Tasks.Task ThereIsAnOnlineFileAvailableThatContainsCasesThatAlreadyExistsInTheBlaiseDatabaseTheCasesAreUpdatedDependingOnTheOutcomeCodes()
        {
            string[] tagsOfScenario = new string[] {
                    "smoke"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("There is an online file available that contains cases that already exists in the " +
                    "blaise database, the cases are updated depending on the outcome codes", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 9
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "primarykey",
                            "outcome",
                            "mode"});
                table1.AddRow(new string[] {
                            "900001",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900002",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900003",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900004",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900005",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900006",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900007",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900008",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900009",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900010",
                            "0",
                            "Web"});
                table1.AddRow(new string[] {
                            "900011",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900012",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900013",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900014",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900015",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900016",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900017",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900018",
                            "0",
                            "Web"});
                table1.AddRow(new string[] {
                            "900019",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900020",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900021",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900022",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900023",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900024",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900025",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900026",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900027",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900028",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900029",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900030",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900031",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900032",
                            "580",
                            "Web"});
                table1.AddRow(new string[] {
                            "900033",
                            "110",
                            "Web"});
                table1.AddRow(new string[] {
                            "900034",
                            "210",
                            "Web"});
                table1.AddRow(new string[] {
                            "900035",
                            "580",
                            "Web"});
#line 10
 await testRunner.GivenAsync("there is a online file that contains the following cases", ((string)(null)), table1, "Given ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "primarykey",
                            "outcome",
                            "mode"});
                table2.AddRow(new string[] {
                            "900001",
                            "110",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900002",
                            "110",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900003",
                            "210",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900004",
                            "310",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900005",
                            "430",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900006",
                            "460",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900007",
                            "461",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900008",
                            "541",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900009",
                            "542",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900010",
                            "110",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900011",
                            "210",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900012",
                            "310",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900013",
                            "430",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900014",
                            "460",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900015",
                            "461",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900016",
                            "541",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900017",
                            "542",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900018",
                            "310",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900019",
                            "562",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900020",
                            "561",
                            "Tel"});
                table2.AddRow(new string[] {
                            "900021",
                            "580",
                            "tel"});
                table2.AddRow(new string[] {
                            "900022",
                            "310",
                            "tel"});
                table2.AddRow(new string[] {
                            "900023",
                            "430",
                            "tel"});
                table2.AddRow(new string[] {
                            "900024",
                            "440",
                            "tel"});
                table2.AddRow(new string[] {
                            "900025",
                            "460",
                            "tel"});
                table2.AddRow(new string[] {
                            "900026",
                            "461",
                            "tel"});
                table2.AddRow(new string[] {
                            "900027",
                            "541",
                            "tel"});
                table2.AddRow(new string[] {
                            "900028",
                            "542",
                            "tel"});
                table2.AddRow(new string[] {
                            "900029",
                            "110",
                            "tel"});
                table2.AddRow(new string[] {
                            "900030",
                            "210",
                            "tel"});
                table2.AddRow(new string[] {
                            "900031",
                            "561",
                            "tel"});
                table2.AddRow(new string[] {
                            "900032",
                            "562",
                            "tel"});
                table2.AddRow(new string[] {
                            "900033",
                            "580",
                            "tel"});
                table2.AddRow(new string[] {
                            "900034",
                            "580",
                            "tel"});
                table2.AddRow(new string[] {
                            "900035",
                            "0",
                            "tel"});
#line 64
 await testRunner.AndAsync("blaise contains the following cases", ((string)(null)), table2, "And ");
#line hidden
#line 118
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "primarykey",
                            "outcome",
                            "mode"});
                table3.AddRow(new string[] {
                            "900001",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900002",
                            "110",
                            "Tel"});
                table3.AddRow(new string[] {
                            "900003",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900004",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900005",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900006",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900007",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900008",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900009",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900010",
                            "110",
                            "Tel"});
                table3.AddRow(new string[] {
                            "900011",
                            "210",
                            "Web"});
                table3.AddRow(new string[] {
                            "900012",
                            "210",
                            "Web"});
                table3.AddRow(new string[] {
                            "900013",
                            "210",
                            "Web"});
                table3.AddRow(new string[] {
                            "900014",
                            "210",
                            "Web"});
                table3.AddRow(new string[] {
                            "900015",
                            "210",
                            "Web"});
                table3.AddRow(new string[] {
                            "900016",
                            "210",
                            "Web"});
                table3.AddRow(new string[] {
                            "900017",
                            "210",
                            "Web"});
                table3.AddRow(new string[] {
                            "900018",
                            "310",
                            "Tel"});
                table3.AddRow(new string[] {
                            "900019",
                            "562",
                            "Tel"});
                table3.AddRow(new string[] {
                            "900020",
                            "561",
                            "Tel"});
                table3.AddRow(new string[] {
                            "900021",
                            "580",
                            "Web"});
                table3.AddRow(new string[] {
                            "900022",
                            "580",
                            "Web"});
                table3.AddRow(new string[] {
                            "900023",
                            "580",
                            "Web"});
                table3.AddRow(new string[] {
                            "900024",
                            "580",
                            "Web"});
                table3.AddRow(new string[] {
                            "900025",
                            "580",
                            "Web"});
                table3.AddRow(new string[] {
                            "900026",
                            "580",
                            "Web"});
                table3.AddRow(new string[] {
                            "900027",
                            "580",
                            "Web"});
                table3.AddRow(new string[] {
                            "900028",
                            "580",
                            "Web"});
                table3.AddRow(new string[] {
                            "900029",
                            "110",
                            "tel"});
                table3.AddRow(new string[] {
                            "900030",
                            "210",
                            "tel"});
                table3.AddRow(new string[] {
                            "900031",
                            "561",
                            "tel"});
                table3.AddRow(new string[] {
                            "900032",
                            "562",
                            "tel"});
                table3.AddRow(new string[] {
                            "900033",
                            "110",
                            "Web"});
                table3.AddRow(new string[] {
                            "900034",
                            "210",
                            "Web"});
                table3.AddRow(new string[] {
                            "900035",
                            "580",
                            "Web"});
#line 119
 await testRunner.ThenAsync("blaise will contain the following cases", ((string)(null)), table3, "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file is complete and in Blaise it is complete, we take the o" +
            "nline case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileIsCompleteAndInBlaiseItIsCompleteWeTakeTheOnlineCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file is complete and in Blaise it is complete, we take the o" +
                    "nline case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 174
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 175
 await testRunner.GivenAsync("there is a online file that contains a case that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 176
 await testRunner.AndAsync("the same case exists in Blaise that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 177
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 178
 await testRunner.ThenAsync("the existing blaise case is overwritten with the online case", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file is partially complete and in Blaise it is complete, we " +
            "keep the existing blaise case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileIsPartiallyCompleteAndInBlaiseItIsCompleteWeKeepTheExistingBlaiseCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file is partially complete and in Blaise it is complete, we " +
                    "keep the existing blaise case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 181
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 182
 await testRunner.GivenAsync("there is a online file that contains a case that is partially complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 183
 await testRunner.AndAsync("the same case exists in Blaise that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 184
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 185
 await testRunner.ThenAsync("the existing blaise case is kept", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file is complete and in Blaise it is partially complete, we " +
            "take the online case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileIsCompleteAndInBlaiseItIsPartiallyCompleteWeTakeTheOnlineCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file is complete and in Blaise it is partially complete, we " +
                    "take the online case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 188
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 189
 await testRunner.GivenAsync("there is a online file that contains a case that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 190
 await testRunner.AndAsync("the same case exists in Blaise that is partially complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 191
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 192
 await testRunner.ThenAsync("the existing blaise case is overwritten with the online case", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file is complete and in Blaise it is between the range 210-5" +
            "42, we take the online case")]
        [global::NUnit.Framework.TestCaseAttribute("210", "Partially completed survey", "4", null)]
        [global::NUnit.Framework.TestCaseAttribute("310", "Non-contact", "5", null)]
        [global::NUnit.Framework.TestCaseAttribute("430", "HQ refusal", "6", null)]
        [global::NUnit.Framework.TestCaseAttribute("440", "Person not available", "7", null)]
        [global::NUnit.Framework.TestCaseAttribute("460", "Refuses cooperation - hard refusal", "8", null)]
        [global::NUnit.Framework.TestCaseAttribute("461", "Refuses cooperation - soft refusal could be contacted again", "9", null)]
        [global::NUnit.Framework.TestCaseAttribute("541", "Language difficulties - notified by Head Office", "10", null)]
        [global::NUnit.Framework.TestCaseAttribute("542", "Language difficulties - notified to interviewer", "11", null)]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileIsCompleteAndInBlaiseItIsBetweenTheRange210_542WeTakeTheOnlineCase(string existingOutcome, string description, string @__pickleIndex, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("existingOutcome", existingOutcome);
            argumentsOfScenario.Add("description", description);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file is complete and in Blaise it is between the range 210-5" +
                    "42, we take the online case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 195
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 196
 await testRunner.GivenAsync("there is a online file that contains a case that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 197
 await testRunner.AndAsync(string.Format("the same case exists in Blaise with the outcome code \'{0}\'", existingOutcome), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 198
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 199
 await testRunner.ThenAsync("the existing blaise case is overwritten with the online case", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file that has not started and in Blaise it is complete, we k" +
            "eep the existing blaise case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileThatHasNotStartedAndInBlaiseItIsCompleteWeKeepTheExistingBlaiseCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "12";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file that has not started and in Blaise it is complete, we k" +
                    "eep the existing blaise case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 212
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 213
 await testRunner.GivenAsync("there is a online file that contains a case that has not been started", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 214
 await testRunner.AndAsync("the same case exists in Blaise that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 215
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 216
 await testRunner.ThenAsync("the existing blaise case is kept", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file is partially complete and in Blaise it is partially com" +
            "plete, we take the online case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileIsPartiallyCompleteAndInBlaiseItIsPartiallyCompleteWeTakeTheOnlineCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "13";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file is partially complete and in Blaise it is partially com" +
                    "plete, we take the online case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 219
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 220
 await testRunner.GivenAsync("there is a online file that contains a case that is partially complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 221
 await testRunner.AndAsync("the same case exists in Blaise that is partially complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 222
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 223
 await testRunner.ThenAsync("the existing blaise case is overwritten with the online case", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file is partially complete and in Blaise and it is between t" +
            "he range 310-542, we take the online case")]
        [global::NUnit.Framework.TestCaseAttribute("310", "Non-contact", "14", null)]
        [global::NUnit.Framework.TestCaseAttribute("430", "HQ refusal", "15", null)]
        [global::NUnit.Framework.TestCaseAttribute("440", "Person not available", "16", null)]
        [global::NUnit.Framework.TestCaseAttribute("460", "Refuses cooperation - hard refusal", "17", null)]
        [global::NUnit.Framework.TestCaseAttribute("461", "Refuses cooperation - soft refusal could be contacted again", "18", null)]
        [global::NUnit.Framework.TestCaseAttribute("541", "Language difficulties - notified by Head Office", "19", null)]
        [global::NUnit.Framework.TestCaseAttribute("542", "Language difficulties - notified to interviewer", "20", null)]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileIsPartiallyCompleteAndInBlaiseAndItIsBetweenTheRange310_542WeTakeTheOnlineCase(string existingOutcome, string description, string @__pickleIndex, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("existingOutcome", existingOutcome);
            argumentsOfScenario.Add("description", description);
            string pickleIndex = @__pickleIndex;
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file is partially complete and in Blaise and it is between t" +
                    "he range 310-542, we take the online case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 226
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 227
 await testRunner.GivenAsync("there is a online file that contains a case that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 228
 await testRunner.AndAsync(string.Format("the same case exists in Blaise with the outcome code \'{0}\'", existingOutcome), ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 229
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 230
 await testRunner.ThenAsync("the existing blaise case is overwritten with the online case", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file that has not started and in Blaise it is non-contact, w" +
            "e keep the existing blaise case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileThatHasNotStartedAndInBlaiseItIsNon_ContactWeKeepTheExistingBlaiseCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "21";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file that has not started and in Blaise it is non-contact, w" +
                    "e keep the existing blaise case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 242
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 243
 await testRunner.GivenAsync("there is a online file that contains a case that has not been started", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 244
 await testRunner.AndAsync("the same case exists in Blaise with the outcome code \'310\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 245
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 246
 await testRunner.ThenAsync("the existing blaise case is kept", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file that is partially complete and in Blaise it marked as r" +
            "espondent request for data to be deleted, we keep the existing blaise case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileThatIsPartiallyCompleteAndInBlaiseItMarkedAsRespondentRequestForDataToBeDeletedWeKeepTheExistingBlaiseCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "22";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file that is partially complete and in Blaise it marked as r" +
                    "espondent request for data to be deleted, we keep the existing blaise case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 249
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 250
 await testRunner.GivenAsync("there is a online file that contains a case that is partially complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 251
 await testRunner.AndAsync("the same case exists in Blaise with the outcome code \'562\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 252
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 253
 await testRunner.ThenAsync("the existing blaise case is kept", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file that is complete and in Blaise it marked as respondent " +
            "request for data to be deleted, we keep the existing blaise case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileThatIsCompleteAndInBlaiseItMarkedAsRespondentRequestForDataToBeDeletedWeKeepTheExistingBlaiseCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "23";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file that is complete and in Blaise it marked as respondent " +
                    "request for data to be deleted, we keep the existing blaise case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 256
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 257
 await testRunner.GivenAsync("there is a online file that contains a case that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 258
 await testRunner.AndAsync("the same case exists in Blaise with the outcome code \'561\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 259
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 260
 await testRunner.ThenAsync("the existing blaise case is kept", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file has a better outcome but the case has been updated rece" +
            "ntly so may be open in Cati, do not update")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileHasABetterOutcomeButTheCaseHasBeenUpdatedRecentlySoMayBeOpenInCatiDoNotUpdate()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "24";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file has a better outcome but the case has been updated rece" +
                    "ntly so may be open in Cati, do not update", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 263
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 264
 await testRunner.GivenAsync("there is a online file that contains a case that is complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 265
 await testRunner.AndAsync("the same case exists in Blaise that is partially complete", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 266
 await testRunner.AndAsync("the case has been updated within the past 30 minutes", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 267
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 268
 await testRunner.ThenAsync("the existing blaise case is kept", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file has already been processed")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileHasAlreadyBeenProcessed()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "25";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file has already been processed", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 271
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 272
 await testRunner.GivenAsync("there is a online file that contains a case that has previously been imported", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 273
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 274
 await testRunner.ThenAsync("the online case is not imported again", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }

        [global::NUnit.Framework.TestAttribute()]
        [global::NUnit.Framework.DescriptionAttribute("A case in the online file that is ineligible and in Blaise it marked as not start" +
            "ed (0) we take the online case")]
        public async global::System.Threading.Tasks.Task ACaseInTheOnlineFileThatIsIneligibleAndInBlaiseItMarkedAsNotStarted0WeTakeTheOnlineCase()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "26";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A case in the online file that is ineligible and in Blaise it marked as not start" +
                    "ed (0) we take the online case", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 278
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 279
 await testRunner.GivenAsync("there is a online file that contains a case that is ineligible", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 280
 await testRunner.AndAsync("the same case exists in Blaise with the outcome code \'0\'", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 281
 await testRunner.WhenAsync("the online file is processed", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 282
 await testRunner.ThenAsync("the existing blaise case is overwritten with the online case", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
